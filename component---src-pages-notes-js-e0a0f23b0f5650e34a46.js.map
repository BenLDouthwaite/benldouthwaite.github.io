{"version":3,"sources":["webpack://bendouthwaite.com/./src/components/bio.js","webpack://bendouthwaite.com/./src/components/seo.js","webpack://bendouthwaite.com/./src/pages/notes.js"],"names":["author","useStaticQuery","site","siteMetadata","className","name","Seo","description","lang","meta","title","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","social","twitter","concat","defaultProps","data","location","siteTitle","markdownPosts","allMarkdownRemark","nodes","mdxPosts","allMdx","length","style","listStyle","map","post","frontmatter","slug","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","fields"],"mappings":"mJAkCA,IA/BY,WAAO,IAAD,EAkBVA,EAAM,WAjBCC,oBAAe,cAiBRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,QACZJ,aAAA,EAAAA,EAAQK,OACP,uCACa,8BAASL,EAAOK,U,oECf/BC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BR,GAASD,oBAAe,cAAxBC,KAgBFS,EAAkBJ,GAAeL,EAAKC,aAAaI,YACnDK,EAAY,UAAGV,EAAKC,oBAAR,aAAG,EAAmBO,MAExC,OACE,gBAAC,IAAD,CACEG,eAAgB,CACdL,QAEFE,MAAOA,EACPI,cAAeF,EAAY,QAAWA,EAAiB,KACvDH,KAAM,CACJ,CACEJ,KAAK,cACLU,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASL,GAEX,CACEM,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEV,KAAK,eACLU,QAAQ,WAEV,CACEV,KAAK,kBACLU,SAAS,UAAAb,EAAKC,oBAAL,mBAAmBc,cAAnB,eAA2BC,UAA3B,IAEX,CACEb,KAAK,gBACLU,QAASL,GAEX,CACEL,KAAK,sBACLU,QAASJ,IAEXQ,OAAOV,MAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,+FCMA,UAzFkB,SAAC,GAAwB,IAAD,EAArBc,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKnB,KAAKC,oBAAV,eAAwBO,QAAxB,QACZc,EAAgBH,EAAKI,kBAAkBC,MAEvCC,EAAWN,EAAKO,OAAOF,MAE7B,OAA6B,IAAzBF,EAAcK,OAEd,gBAAC,IAAD,CAAQP,SAAUA,EAAUZ,MAAOa,GACjC,gBAAC,IAAD,CAAKb,MAAM,cACX,gBAAC,IAAD,MACA,uLAUJ,gBAAC,IAAD,CAAQY,SAAUA,EAAUZ,MAAOa,GACjC,gBAAC,IAAD,CAAKb,MAAM,cACX,sBAAIoB,MAAO,CAAEC,UAAU,SACpBJ,EAASK,KAAI,SAAAC,GACZ,IAAMvB,EAAQuB,EAAKC,YAAYxB,OAASuB,EAAKE,KAE7C,OACE,sBAAIC,IAAKH,EAAKE,MACZ,2BACE/B,UAAU,iBACViC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAE,IAAMP,EAAKE,KAAQM,SAAS,OAClC,wBAAMA,SAAS,YAAY/B,KAG/B,6BAAQuB,EAAKC,YAAYQ,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAY3B,aAAe0B,EAAKY,SAE/CJ,SAAS,sBAOpBjB,EAAcQ,KAAI,SAAAC,GACjB,IAAMvB,EAAQuB,EAAKC,YAAYxB,OAASuB,EAAKa,OAAOX,KAEpD,OACE,sBAAIC,IAAKH,EAAKa,OAAOX,MACnB,2BACE/B,UAAU,iBACViC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAIP,EAAKa,OAAOX,KAAMM,SAAS,OACnC,wBAAMA,SAAS,YAAY/B,KAG/B,6BAAQuB,EAAKC,YAAYQ,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQX,EAAKC,YAAY3B,aAAe0B,EAAKY,SAE/CJ,SAAS","file":"component---src-pages-notes-js-e0a0f23b0f5650e34a46.js","sourcesContent":["import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const markdownPosts = data.allMarkdownRemark.nodes\n\n  const mdxPosts = data.allMdx.nodes\n\n  if (markdownPosts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Seo title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title=\"All posts\" />\n      <ol style={{ listStyle: `none` }}>\n        {mdxPosts.map(post => {\n          const title = post.frontmatter.title || post.slug\n\n          return (\n            <li key={post.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={`/${post.slug}`} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n        {markdownPosts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small>{post.frontmatter.date}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(sort: { fields: frontmatter___date, order: DESC }) {\n      nodes {\n        frontmatter {\n          title\n          date(formatString: \"MMMM DD, YYYY\")\n        }\n        slug\n        excerpt\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}