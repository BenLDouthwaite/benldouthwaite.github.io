{"componentChunkName":"component---src-templates-blog-post-js","path":"/code/go-monitoring-kubernetes/","result":{"data":{"site":{"siteMetadata":{"title":"BLD"}},"markdownRemark":{"id":"fb572160-8761-5ca1-bd01-fa3fea4e46ae","excerpt":"Good monitoring is critical for managing resilient apps. I like the standarised approach to monitoring provided by Prometheus, this tutorial walks through…","html":"<p>Good monitoring is critical for managing resilient apps. I like the standarised approach to monitoring provided by Prometheus, this tutorial walks through setting up a simple Go app in Kubernetes, and iteratively adding monitoring with Prometheus and Grafana.</p>\n<p>To follow along, you should make sure you already have <a href=\"https://go.dev/\">Go</a>, <a href=\"https://www.docker.com/\">Docker</a>, <a href=\"https://kubernetes.io/\">Kubernetes</a> and <a href=\"https://minikube.sigs.k8s.io\">Minikube</a> installed, and ideally have some base knowledge of the Go language, but this is not strictly required. I won’t go into detail for every change, but will provide links to additional resources where appropriate.</p>\n<p>Disclaimer: This post is intended as a learning exercise to better understand the moving parts, and is not production ready, nor do I claim any of the methods are best practice!</p>\n<h2 id=\"contents\">Contents</h2>\n<ul>\n<li>Setting up a Go “Hello, World!” app.</li>\n<li>Setting up a Prometheus server.</li>\n<li>Summary</li>\n</ul>\n<h2 id=\"setting-up-a-go-hello-world-app\">Setting up a Go “Hello, World!” app.</h2>\n<h3 id=\"go-app-server\">Go App Server</h3>\n<p>We’ll setup a Go server to monitor. For simplicity I will avoid using any additional libraries such as mux.</p>\n<p>Create our new module</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">go mod init example.com/gomonitoring</span></span></code></pre></div>\n<p>And create our ‘main.go’.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is all we need for a functional server. We can run our code with</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">go run main.go</span></span></code></pre></div>\n<p>and verify the response with</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> localhost:8080</span></span>\n<span class=\"token output\">Hello, World!</span></code></pre></div>\n<h3 id=\"prometheus-instrumentation\">Prometheus Instrumentation</h3>\n<p>Similar to the official docs, <a href=\"https://prometheus.io/docs/guides/go-application/\">Instrumenting a Go application for Prometheus</a>, we will setup a new handler to expose the metrics on a “/metrics” endpoint.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus/promhttp\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">HandleFunc</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> helloHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/metrics\"</span><span class=\"token punctuation\">,</span> promhttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>will then import the prometheus dependency.</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">go mod tidy</span></span></code></pre></div>\n<p>Restart our app, and we can view our metrics</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> localhost:8080/metrics</span></span>\n<span class=\"token output\">TODO SHOW SNIPPET</span></code></pre></div>\n<h3 id=\"dockerise-the-application\">Dockerise the application.</h3>\n<p>Create a standard <a href=\"https://docs.docker.com/language/golang/build-images/\">Go Dockerfile</a></p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> golang:1.16-alpine</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> go.mod ./</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> go.sum ./</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> go mod download</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> *.go .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> go build -o main .</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 8080</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"./main\"</span>]</span></code></pre></div>\n<p>Build our image:</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker build -t go-hello <span class=\"token builtin class-name\">.</span></span></span></code></pre></div>\n<p>Run our built image:</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker run -d -p <span class=\"token number\">8080</span>:8080 --name go-hello-container go-hello</span></span></code></pre></div>\n<p>Verify our metrics are being exported</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> localhost:8080/metrics</span></span>\n<span class=\"token output\">TODO SHOW SNIPPET</span></code></pre></div>\n<h3 id=\"deploy-to-kubernetes-minikube\">Deploy to Kubernetes (minikube)</h3>\n<p>Start minikube</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube start</span></span></code></pre></div>\n<p>Push our image to a docker repository (DockerHub).\nYou may need to login to allow pushing the image.</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker build -t benldouthwaite/go-hello <span class=\"token builtin class-name\">.</span></span></span>\n<span class=\"token output\">...\nSuccessfully tagged benldouthwaite/go-hello:latest\n\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">docker push benldouthwaite/go-hello</span></span></code></pre></div>\n<p>Now we can create our manifest files.</p>\n<p>‘deploy/app/deployment.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>go<span class=\"token punctuation\">-</span>app\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>app\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>app<span class=\"token punctuation\">-</span>container\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> benldouthwaite/go<span class=\"token punctuation\">-</span>hello\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"128Mi\"</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"500m\"</span>\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span></code></pre></div>\n<p>‘deploy/app/service.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>hello<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> go<span class=\"token punctuation\">-</span>app\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8080</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort</code></pre></div>\n<p>Lets also create a Makefile, that will simplify our deployment scripts as the project grows.</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># Application</span>\n<span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> kubectl-deploy\n<span class=\"token symbol\">kubectl-deploy</span><span class=\"token punctuation\">:</span>\n\tkubectl apply -f deploy/app/deployment.yaml\n\tkubectl apply -f deploy/app/service.yaml\n\n<span class=\"token comment\"># Docker</span>\n<span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> docker-push\n<span class=\"token symbol\">docker-push</span><span class=\"token punctuation\">:</span>\n<span class=\"token symbol\">\tdocker build -t benldouthwaite/go-hello</span><span class=\"token punctuation\">:</span>latest -f Dockerfile .\n<span class=\"token symbol\">\tdocker push benldouthwaite/go-hello</span><span class=\"token punctuation\">:</span>latest\n<span class=\"token symbol\">\tdocker rmi benldouthwaite/go-hello</span><span class=\"token punctuation\">:</span>latest\n\tdocker system prune --volumes --force</code></pre></div>\n<p>And lets try deploying our app.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make deploy-application</code></pre></div>\n<p>Once the manifest changes have been applied, we can extract the local app url using minikube. Note, this can be different every time you run the app on minikube.</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube <span class=\"token function\">service</span> go-hello-service --url</span></span>\n<span class=\"token output\">http://192.168.49.2:30020</span></code></pre></div>\n<p>Opening the provided URL, we should be able to see our “Hello, World!” message, from our Go app running in Kubernetes. We can also view some application metrics being exposed at the {url}/metrics endpoint.</p>\n<p>By now our file structure is as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── deploy\n│   └── app\n│       ├── deployment.yaml\n│       └── service.yaml\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── main.go\n└── Makefile</code></pre></div>\n<h2 id=\"setting-up-a-prometheus-server\">Setting up a Prometheus Server</h2>\n<p>Prometheus used a pull model to scrape metrics from applications that expose data in the correct format. We can now setup a prometheus server in kubernetes to scrape the metrics being exposed by our Go app.</p>\n<h3 id=\"configure-service-accounts-and-roles\">Configure service accounts and roles</h3>\n<p>‘deploy/monitor/service-account.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> monitor<span class=\"token punctuation\">-</span>service<span class=\"token punctuation\">-</span>account\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</code></pre></div>\n<p>‘deploy/monitor/cluster-role.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> monitor<span class=\"token punctuation\">-</span>cluster<span class=\"token punctuation\">-</span>role\n\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"services\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pods\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"endpoints\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">nonResourceURLs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/metrics\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>‘deploy/monitor/cluster-role.binding.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRoleBinding\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> monitor<span class=\"token punctuation\">-</span>cluster<span class=\"token punctuation\">-</span>role<span class=\"token punctuation\">-</span>binding\n\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> monitor<span class=\"token punctuation\">-</span>cluster<span class=\"token punctuation\">-</span>role\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> monitor<span class=\"token punctuation\">-</span>service<span class=\"token punctuation\">-</span>account\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default</code></pre></div>\n<p>And lets update our Makefile to include a deploy command for the roles</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># Application</span>\n...\n\n<span class=\"token comment\"># Roles</span>\n<span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> deploy-roles\n<span class=\"token symbol\">deploy-roles</span><span class=\"token punctuation\">:</span>\n\tkubectl apply -f deploy/monitor/service-account.yaml\n\tkubectl apply -f deploy/monitor/cluster-role.yaml\n\tkubectl apply -f deploy/monitor/cluster-role-binding.yaml</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">make</span> deploy-roles</span></span></code></pre></div>\n<h3 id=\"configure-the-prometheus-server-deployment\">Configure the Prometheus server deployment</h3>\n<p>‘deploy/prometheus/config-map.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>map\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">prometheus.yml</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    global:\n      scrape_interval: 15s\n      scrape_timeout: 15s\n    scrape_configs:\n      - job_name: application-metrics\n        metrics_path: /metrics\n        kubernetes_sd_configs:\n        - role: endpoints\n        relabel_configs:\n        - action: labelmap\n          regex: __meta_kubernetes_service_label_(.+)\n        - source_labels: [__meta_kubernetes_namespace]\n          action: replace\n          target_label: namespace\n        - source_labels: [__meta_kubernetes_service_name]\n          action: replace\n          target_label: service</span></code></pre></div>\n<p>‘deploy/prometheus/deployment.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>deployment\n\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> prometheus\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> prometheus\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">serviceAccountName</span><span class=\"token punctuation\">:</span> monitor<span class=\"token punctuation\">-</span>service<span class=\"token punctuation\">-</span>account\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> prom/prometheus<span class=\"token punctuation\">:</span>latest\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">limits</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1000m\"</span> <span class=\"token comment\"># 1 core</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1024Mi\"</span> <span class=\"token comment\"># 1 GB</span>\n            <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"500m\"</span>\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"512Mi\"</span>\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n              <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n              <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9090</span>\n          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /etc/prometheus/\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> storage\n              <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /prometheus/\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> config\n          <span class=\"token key atrule\">configMap</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>map\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> storage\n          <span class=\"token key atrule\">emptyDir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>‘deploy/prometheus/service.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> prometheus<span class=\"token punctuation\">-</span>service\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> default\n\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> NodePort\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> prometheus\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9090</span></code></pre></div>\n<p>Again, lets update out Makefile to include a deploy command for the prometheus server</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># Application</span>\n...\n\n<span class=\"token comment\"># Roles</span>\n<span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> deploy-roles\n<span class=\"token symbol\">deploy-roles</span><span class=\"token punctuation\">:</span>\n\tkubectl apply -f deploy/monitor/service-account.yaml\n\tkubectl apply -f deploy/monitor/cluster-role.yaml\n\tkubectl apply -f deploy/monitor/cluster-role-binding.yaml</code></pre></div>\n<p>We can now get the URL for the prometheus server from minikube</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">minikube <span class=\"token function\">service</span> prometheus-service --url</span></span>\n<span class=\"token output\">http://192.168.49.2:32543</span></code></pre></div>\n<p>and we can now query for the scraped data e.g. Querying ‘go_info’ to get assorted data on both our Go app and the prometheus service.</p>\n<p>At this point, we have a Go app exposing some metrics that are being scraped into a prometheus server we can query.</p>\n<p>Our file structure looks as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.\n├── deploy\n│   ├── app\n│   │   ├── deployment.yaml\n│   │   └── service.yaml\n│   ├── monitor\n│   │   ├── cluster-role-binding.yaml\n│   │   ├── cluster-role.yaml\n│   │   └── service-account.yaml\n│   └── prometheus\n│       ├── config-map.yaml\n│       ├── deployment.yaml\n│       └── service.yaml\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── main.go\n└── Makefile</code></pre></div>\n<h2 id=\"exposing-custom-prometheus-metrics\">Exposing custom prometheus metrics</h2>\n<p>Prometheus gives us a lot of metrics by default, but we’re specifically interested in our endpoint.</p>\n<p>We will now add a custom ‘totalRequests’ <a href=\"https://prometheus.io/docs/concepts/metric_types/#counter\">Counter</a> to track the number of requests we receive. To trigger our counter’s increment, we will create a Prometheus Middleware layer for requests. If you are unfamilar with middleware in Go, I recommend <a href=\"https://www.alexedwards.net/blog/making-and-using-middleware\">Alex Edwards’ Tutorial</a></p>\n<p>After making all the required changes, our ‘main.go’ will looks as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus\"</span>\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus/promhttp\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1. Create our Counter</span>\n<span class=\"token keyword\">var</span> totalRequests <span class=\"token operator\">=</span> prometheus<span class=\"token punctuation\">.</span><span class=\"token function\">NewCounterVec</span><span class=\"token punctuation\">(</span>\n\tprometheus<span class=\"token punctuation\">.</span>CounterOpts<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http_requests_total\"</span><span class=\"token punctuation\">,</span>\n\t\tHelp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Number of get requests\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2. Create an init block to be run at startup, and register our counter</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>totalRequests<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3. Define our prometheus middleware to delegate to the wrapper function, and increment our counter</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">prometheusMiddleware</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tnext<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\t\ttotalRequests<span class=\"token punctuation\">.</span><span class=\"token function\">WithLabelValues</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 4. Extract our hello handler, and wrap in our newly defined middleware</span>\n\thello <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span>helloHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">prometheusMiddleware</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/metrics\"</span><span class=\"token punctuation\">,</span> promhttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lets test the change is exporting data as expected locally</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">go run main.go</span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -s localhost:8080/metrics <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> http_requests_total</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -s localhost:8080</span></span>\n<span class=\"token output\">Hello, World!\n</span><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -s localhost:8080/metrics <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> http_requests_total</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">HELP http_requests_total Number of get requests</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">TYPE http_requests_total counter</span></span>\n<span class=\"token output\">http_requests_total{path=\"/\"} 1</span></code></pre></div>\n<p>The request is successfully recognised and increments out counter.</p>\n<h2 id=\"measuring-latency-and-errors\">Measuring Latency and Errors</h2>\n<p>The above shows a base foundation for getting metrics from a Go server into a queryable prometheus instance, but total requests alone is not a particularly interesting metric. Lets see if we can also collect information on the errors and latency of our requests to cover some of the <a href=\"https://sre.google/sre-book/monitoring-distributed-systems/#xref_monitoring_golden-signals\">Four Golden Signals</a></p>\n<h3 id=\"introducing-variability\">Introducing Variability</h3>\n<p>Right now our Hello endpoint is simply returning a string, so won’t produce very interesting metrics. Lets include a random delay and chance to fail to simiulate a more complex endpoint, and allow us to test our latency and error monitoring.</p>\n<p>Our updated hello handler will look as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Mock performing work, delay up to 1 second</span>\n\tdelay <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Mock failure chance</span>\n\t<span class=\"token keyword\">if</span> failureChance <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> failureChance <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and be sure to add “math/rand” and “time” to our imports.</p>\n<p>There’s an additional consideration, based on the way the rand library works in Go, we also want to seed our randomness, so lets update our ‘init’ method</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ensure the random values are different on each run.</span>\n\trand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>totalRequests<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Testing the above changes, we can now see the endpoint takes up to a second to respond, and will occasionally fail.</p>\n<h3 id=\"measuring-latency\">Measuring Latency</h3>\n<p>Where we used a counter for the total requests metric, we will use a <a href=\"https://prometheus.io/docs/concepts/metric_types/#histogram\">Histogram</a> for latency.</p>\n<p>After adding our changes, our updated main.go will look like</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus\"</span>\n\n    <span class=\"token comment\">// Import the promauto dependency.</span>\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus/promauto\"</span>\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus/promhttp\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> totalRequests <span class=\"token operator\">=</span> prometheus<span class=\"token punctuation\">.</span><span class=\"token function\">NewCounterVec</span><span class=\"token punctuation\">(</span>\n\tprometheus<span class=\"token punctuation\">.</span>CounterOpts<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http_requests_total\"</span><span class=\"token punctuation\">,</span>\n\t\tHelp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Number of get requests\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 1. Newly registered histogram metric.</span>\n<span class=\"token keyword\">var</span> httpDuration <span class=\"token operator\">=</span> promauto<span class=\"token punctuation\">.</span><span class=\"token function\">NewHistogramVec</span><span class=\"token punctuation\">(</span>prometheus<span class=\"token punctuation\">.</span>HistogramOpts<span class=\"token punctuation\">{</span>\n\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http_response_time_seconds\"</span><span class=\"token punctuation\">,</span>\n\tHelp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Duration of HTTP requests\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>totalRequests<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// 2. Register our latency histogram</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>httpDuration<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">prometheusMiddleware</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 3. Introduce a timer in our middleware, to track the time to proxy the request.</span>\n        path <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path\n\t\ttimer <span class=\"token operator\">:=</span> prometheus<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>httpDuration<span class=\"token punctuation\">.</span><span class=\"token function\">WithLabelValues</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\tnext<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\n\t\ttotalRequests<span class=\"token punctuation\">.</span><span class=\"token function\">WithLabelValues</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ttimer<span class=\"token punctuation\">.</span><span class=\"token function\">ObserveDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thello <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span>helloHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">prometheusMiddleware</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/metrics\"</span><span class=\"token punctuation\">,</span> promhttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Mock performing work</span>\n\tdelay <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Mock failure chance</span>\n\t<span class=\"token keyword\">if</span> failureChance <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> failureChance <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lets test the change is exporting data as expected locally</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\">go run main.go</span></span></code></pre></div>\n<p>Refresh the hello endpoint a few times, we should be able our latency histogram data being populated.</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -s localhost:8080/metrics <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> http_response_time</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">HELP http_response_time_seconds Duration of HTTP requests</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">TYPE http_response_time_seconds histogram</span></span>\n<span class=\"token output\">http_response_time_seconds_bucket{path=\"/\",le=\"0.005\"} 0\nhttp_response_time_seconds_bucket{path=\"/\",le=\"0.01\"} 0\nhttp_response_time_seconds_bucket{path=\"/\",le=\"0.025\"} 0\nhttp_response_time_seconds_bucket{path=\"/\",le=\"0.05\"} 0\nhttp_response_time_seconds_bucket{path=\"/\",le=\"0.1\"} 0\nhttp_response_time_seconds_bucket{path=\"/\",le=\"0.25\"} 0\nhttp_response_time_seconds_bucket{path=\"/\",le=\"0.5\"} 4\nhttp_response_time_seconds_bucket{path=\"/\",le=\"1\"} 5\nhttp_response_time_seconds_bucket{path=\"/\",le=\"2.5\"} 5\nhttp_response_time_seconds_bucket{path=\"/\",le=\"5\"} 5\nhttp_response_time_seconds_bucket{path=\"/\",le=\"10\"} 5\nhttp_response_time_seconds_bucket{path=\"/\",le=\"+Inf\"} 5\nhttp_response_time_seconds_sum{path=\"/\"} 2.108435289\nhttp_response_time_seconds_count{path=\"/\"} 5</span></code></pre></div>\n<h3 id=\"errors\">Errors</h3>\n<p>We can now track how many requests we are receiving, and their latency. Lets also track the error rate. Conceptually, this is just a counter like our earlier totalRequests method, but requires a few additional changes to integrate with the Go http api.</p>\n<p>Currently our prometheus middleware will proxy requests to the next http handler in the chain, but has no knowledge of the Status code of requests. Will will intercept this data with a custom “Status Recorder” that implements ResponseWriter and records the status code.</p>\n<p>After making all our required changes, the final version of the main.go looks as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\n    <span class=\"token comment\">// New Import</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"time\"</span>\n\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus\"</span>\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus/promauto\"</span>\n\t<span class=\"token string\">\"github.com/prometheus/client_golang/prometheus/promhttp\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> totalRequests <span class=\"token operator\">=</span> prometheus<span class=\"token punctuation\">.</span><span class=\"token function\">NewCounterVec</span><span class=\"token punctuation\">(</span>\n\tprometheus<span class=\"token punctuation\">.</span>CounterOpts<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http_requests_total\"</span><span class=\"token punctuation\">,</span>\n\t\tHelp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Number of get requests\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> httpDuration <span class=\"token operator\">=</span> promauto<span class=\"token punctuation\">.</span><span class=\"token function\">NewHistogramVec</span><span class=\"token punctuation\">(</span>prometheus<span class=\"token punctuation\">.</span>HistogramOpts<span class=\"token punctuation\">{</span>\n\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"http_response_time_seconds\"</span><span class=\"token punctuation\">,</span>\n\tHelp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Duration of HTTP requests\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Define our responseStatus status counter</span>\n<span class=\"token keyword\">var</span> responseStatus <span class=\"token operator\">=</span> prometheus<span class=\"token punctuation\">.</span><span class=\"token function\">NewCounterVec</span><span class=\"token punctuation\">(</span>\n\tprometheus<span class=\"token punctuation\">.</span>CounterOpts<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"response_status\"</span><span class=\"token punctuation\">,</span>\n\t\tHelp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Status of HTTP response\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Create our status recorder struct</span>\n<span class=\"token keyword\">type</span> StatusRecorder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\thttp<span class=\"token punctuation\">.</span>ResponseWriter\n\tStatus <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Implementent ResponseWriter on StatusRecorder</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>StatusRecorder<span class=\"token punctuation\">)</span> <span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>status <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tr<span class=\"token punctuation\">.</span>Status <span class=\"token operator\">=</span> status\n\tr<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">.</span><span class=\"token function\">WriteHeader</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rand<span class=\"token punctuation\">.</span><span class=\"token function\">Seed</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">UnixNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>totalRequests<span class=\"token punctuation\">)</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>httpDuration<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// Register the new metric</span>\n\tprometheus<span class=\"token punctuation\">.</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span>responseStatus<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\thello <span class=\"token operator\">:=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span>helloHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">prometheusMiddleware</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/metrics\"</span><span class=\"token punctuation\">,</span> promhttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">prometheusMiddleware</span><span class=\"token punctuation\">(</span>next http<span class=\"token punctuation\">.</span>Handler<span class=\"token punctuation\">)</span> http<span class=\"token punctuation\">.</span>Handler <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">HandlerFunc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpath <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>URL<span class=\"token punctuation\">.</span>Path\n\t\ttimer <span class=\"token operator\">:=</span> prometheus<span class=\"token punctuation\">.</span><span class=\"token function\">NewTimer</span><span class=\"token punctuation\">(</span>httpDuration<span class=\"token punctuation\">.</span><span class=\"token function\">WithLabelValues</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// Wrap our responseWriter in our custom StatusRecorder</span>\n\t\trecorder <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>StatusRecorder<span class=\"token punctuation\">{</span>\n\t\t\tResponseWriter<span class=\"token punctuation\">:</span> w<span class=\"token punctuation\">,</span>\n\t\t\tStatus<span class=\"token punctuation\">:</span>         <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tnext<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>recorder<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\n\t\tstatusCode <span class=\"token operator\">:=</span> recorder<span class=\"token punctuation\">.</span>Status\n\t\tresponseStatus<span class=\"token punctuation\">.</span><span class=\"token function\">WithLabelValues</span><span class=\"token punctuation\">(</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t\ttotalRequests<span class=\"token punctuation\">.</span><span class=\"token function\">WithLabelValues</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\ttimer<span class=\"token punctuation\">.</span><span class=\"token function\">ObserveDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">helloHandler</span><span class=\"token punctuation\">(</span>w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// Mock performing work</span>\n\tdelay <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond\n\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// Mock failure chance</span>\n\t<span class=\"token keyword\">if</span> failureChance <span class=\"token operator\">:=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> failureChance <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span>StatusInternalServerError<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Initially, this looks the same as our previous metrics. We create a new prometheus variable and include it in out init block</p>\n<p>The major change is updating our prometheus middleware to use the new StatusRecorder type as a wrapper around our existing response writer. From our new type, we are able to extract the status code from the response and increment our responseStatus counter.</p>\n<p>Now when we deploy our changes, refresh our endpoint a few times, we should be able to see extra data in our “/metrics” endpoint for response status</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token function\">curl</span> -s localhost:8080/metrics <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> response_status</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">HELP response_status Status of HTTP response</span></span>\n<span class=\"token command\"><span class=\"token shell-symbol important\">#</span> <span class=\"token bash language-bash\">TYPE response_status counter</span></span>\n<span class=\"token output\">response_status{status=\"200\"} 13\nresponse_status{status=\"500\"} 1</span></code></pre></div>\n<p>We now have a Go app exposing metrics on request count, latency and error rate that get scraped into a prometheus server.</p>\n<h2 id=\"setting-up-a-grafana-server\">Setting up a Grafana server.</h2>\n<p>TODO</p>\n<p>‘deploy/grafana/deployment.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> grafana\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> grafana\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> grafana\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> grafana\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">securityContext</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">fsGroup</span><span class=\"token punctuation\">:</span> <span class=\"token number\">472</span>\n        <span class=\"token key atrule\">supplementalGroups</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token number\">0</span>\n      <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> grafana\n          <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> grafana/grafana<span class=\"token punctuation\">:</span>7.5.2\n          <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> IfNotPresent\n          <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n              <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">-</span>grafana\n              <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n          <span class=\"token key atrule\">readinessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n            <span class=\"token key atrule\">httpGet</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /robots.txt\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n              <span class=\"token key atrule\">scheme</span><span class=\"token punctuation\">:</span> HTTP\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n            <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n            <span class=\"token key atrule\">successThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n          <span class=\"token key atrule\">livenessProbe</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">failureThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n            <span class=\"token key atrule\">initialDelaySeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>\n            <span class=\"token key atrule\">periodSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n            <span class=\"token key atrule\">successThreshold</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n            <span class=\"token key atrule\">tcpSocket</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n            <span class=\"token key atrule\">timeoutSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n          <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">cpu</span><span class=\"token punctuation\">:</span> 250m\n              <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> 750Mi\n          <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /var/lib/grafana\n              <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> grafana<span class=\"token punctuation\">-</span>pv\n      <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> grafana<span class=\"token punctuation\">-</span>pv\n          <span class=\"token key atrule\">persistentVolumeClaim</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">claimName</span><span class=\"token punctuation\">:</span> grafana<span class=\"token punctuation\">-</span>pvce</code></pre></div>\n<p>‘deploy/grafana/service.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> grafana\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3000</span>\n      <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP\n      <span class=\"token key atrule\">targetPort</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">-</span>grafana\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> grafana\n  <span class=\"token key atrule\">sessionAffinity</span><span class=\"token punctuation\">:</span> None\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer</code></pre></div>\n<p>‘deploy/grafana/pvc.yaml’</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> PersistentVolumeClaim\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> grafana<span class=\"token punctuation\">-</span>pvc\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">accessModes</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> ReadWriteOnce\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">requests</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">storage</span><span class=\"token punctuation\">:</span> 1Gi</code></pre></div>\n<p>Makefile update:</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">...\n<span class=\"token comment\"># Grafana</span>\n<span class=\"token builtin\">.PHONY</span><span class=\"token punctuation\">:</span> deploy-grafana\n<span class=\"token symbol\">deploy-grafana</span><span class=\"token punctuation\">:</span>\n\tkubectl apply -f deploy/grafana/deployment.yaml\n\tkubectl apply -f deploy/grafana/service.yaml\n\tkubectl apply -f deploy/grafana/pvc.yaml</code></pre></div>\n<p>With this setup, we can use the default login of ‘admin’ for user and password</p>\n<p>Setup Data source to connect to Prometheus service at the url exposed by minikube\nOnce the data source is connected, we can create our dashboard to read out custom metrics.</p>\n<p>Throughput:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rate(http_requests_total[1m])</code></pre></div>\n<p>Latency: e.g. P95</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">histogram_quantile(0.95, rate(http_response_time_seconds_bucket{service=\"go-hello-service\", path=\"/\"}[1m]))</code></pre></div>\n<p>Status Code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">rate(response_status[1m])</code></pre></div>\n<h3 id=\"generating-load\">Generating load</h3>\n<p>I often use <a href=\"https://github.com/tsenart/vegeta\">Vegeta</a> as a local load testing tool</p>\n<p>Once downloaded, we can generate load to our app by running</p>\n<div class=\"gatsby-highlight\" data-language=\"shellsession\"><pre class=\"language-shellsession\"><code class=\"language-shellsession\"><span class=\"token command\"><span class=\"token shell-symbol important\">$</span> <span class=\"token bash language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"GET <span class=\"token variable\"><span class=\"token variable\">$(</span>minikube <span class=\"token function\">service</span> go-hello-service --url<span class=\"token variable\">)</span></span>\"</span> <span class=\"token operator\">|</span></span></span>\n<span class=\"token output\">vegeta attack -duration=10s -rate=30/1s |\ntee resutls.bin |\nvegeta report</span></code></pre></div>\n<p>And then see the traffic showing on our newly created dashboard.</p>\n<p>// TODO Insert image of dashbaord.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>We have setup a Go server from scratch, and can monitor the request count, latency and errors as raw data and with dashboards in Grafana.</p>\n<p>The source code for this post is available at <a href=\"TODO%20NEW%20GITHUB%20REPO\">TODO ADD LINK</a>\n// Link to source code, in a clean “blog-reference” repo.</p>\n<p>If you have feedback on this post, feel free to reach out to me on Twitter or LinkedIn. Links at the bottom of the page.</p>\n<h2 id=\"sources\">Sources</h2>\n<ul>\n<li><a href=\"https://go.dev/doc/tutorial/create-module\">https://go.dev/doc/tutorial/create-module</a></li>\n<li><a href=\"https://docs.docker.com/language/golang/build-images/\">https://docs.docker.com/language/golang/build-images/</a></li>\n<li><a href=\"https://www.alexedwards.net/blog/making-and-using-middleware\">https://www.alexedwards.net/blog/making-and-using-middleware</a></li>\n<li><a href=\"https://gabrieltanner.org/blog/collecting-prometheus-metrics-in-golang\">https://gabrieltanner.org/blog/collecting-prometheus-metrics-in-golang</a></li>\n<li><a href=\"https://gobyexample.com/random-numbers\">https://gobyexample.com/random-numbers</a></li>\n<li><a href=\"https://dev.to/julienp/logging-the-status-code-of-a-http-handler-in-go-25aa\">https://dev.to/julienp/logging-the-status-code-of-a-http-handler-in-go-25aa</a></li>\n<li><a href=\"https://www.bogotobogo.com/GoLang/GoLang_Web_Building_Docker_Image_and_Deploy_to_Kubernetes.php\">https://www.bogotobogo.com/GoLang/GoLang_Web_Building_Docker_Image_and_Deploy_to_Kubernetes.php</a></li>\n<li><a href=\"https://flaviocopes.com/go-random/\">https://flaviocopes.com/go-random/</a>\n<a href=\"https://grafana.com/docs/grafana/latest/installation/kubernetes/\">https://grafana.com/docs/grafana/latest/installation/kubernetes/</a></li>\n<li><a href=\"https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus-kubernetes.yml\">https://github.com/prometheus/prometheus/blob/main/documentation/examples/prometheus-kubernetes.yml</a></li>\n<li><a href=\"https://medium.com/kubernetes-tutorials/monitoring-your-kubernetes-deployments-with-prometheus-5665eda54045\">https://medium.com/kubernetes-tutorials/monitoring-your-kubernetes-deployments-with-prometheus-5665eda54045</a></li>\n</ul>","frontmatter":{"title":"Go monitoring in Kubernetes.","date":"February 14, 2022","description":""}},"previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello, World"}},"next":null},"pageContext":{"id":"fb572160-8761-5ca1-bd01-fa3fea4e46ae","previousPostId":"41d76a0a-c870-5fe0-bbe4-479e5fe8cc5f","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}