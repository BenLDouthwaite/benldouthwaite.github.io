{"version":3,"sources":["webpack://bendouthwaite.com/./src/components/bio.js","webpack://bendouthwaite.com/./src/components/seo.js","webpack://bendouthwaite.com/./src/templates/blog-post.js"],"names":["author","useStaticQuery","site","siteMetadata","className","name","Seo","description","lang","meta","title","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","social","twitter","concat","defaultProps","data","location","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"mappings":"mJAkCA,IA/BY,WAAO,IAAD,EAkBVA,EAAM,WAjBCC,oBAAe,cAiBRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACE,uBAAKI,UAAU,QACZJ,aAAA,EAAAA,EAAQK,OACP,uCACa,8BAASL,EAAOK,U,oECf/BC,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BR,GAASD,oBAAe,cAAxBC,KAgBFS,EAAkBJ,GAAeL,EAAKC,aAAaI,YACnDK,EAAY,UAAGV,EAAKC,oBAAR,aAAG,EAAmBO,MAExC,OACE,gBAAC,IAAD,CACEG,eAAgB,CACdL,QAEFE,MAAOA,EACPI,cAAeF,EAAY,QAAWA,EAAiB,KACvDH,KAAM,CACJ,CACEJ,KAAK,cACLU,QAASJ,GAEX,CACEK,SAAS,WACTD,QAASL,GAEX,CACEM,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEV,KAAK,eACLU,QAAQ,WAEV,CACEV,KAAK,kBACLU,SAAS,UAAAb,EAAKC,oBAAL,mBAAmBc,cAAnB,eAA2BC,UAA3B,IAEX,CACEb,KAAK,gBACLU,QAASL,GAEX,CACEL,KAAK,sBACLU,QAASJ,IAEXQ,OAAOV,MAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,+FCxBA,UA3DyB,SAAC,GAAwB,IAAD,EAArBc,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKnB,KAAKC,oBAAV,eAAwBO,QAAxB,QACVgB,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KAElB,OACE,gBAAC,IAAD,CAAQL,SAAUA,EAAUZ,MAAOe,GACjC,gBAAC,IAAD,CACEf,MAAOa,EAAKK,YAAYlB,MACxBH,YAAagB,EAAKK,YAAYrB,aAAegB,EAAKM,UAEpD,2BACEzB,UAAU,YACV0B,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYT,EAAKK,YAAYlB,QAG5C,2BACEuB,wBAAyB,CAAEC,OAAQX,EAAKY,MACxCH,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAD,QAGJ,uBAAK5B,UAAU,iBACb,sBACEgC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGf,GACC,gBAAC,EAAAgB,KAAD,CAAMC,GAAIjB,EAASkB,OAAOC,KAAMC,IAAI,QAApC,KACKpB,EAASE,YAAYlB,QAI9B,0BACGiB,GACC,gBAAC,EAAAe,KAAD,CAAMC,GAAIhB,EAAKiB,OAAOC,KAAMC,IAAI,QAC7BnB,EAAKC,YAAYlB,MADpB","file":"component---src-templates-blog-post-js-d20b04b0832c04887c13.js","sourcesContent":["import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSeo.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          {/*<p>{post.frontmatter.date}</p>*/}\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}